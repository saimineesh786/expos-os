alias funct_num R1;
alias current_pid R2;

if(funct_num==1)	then
	alias index R3;
	index=0;
	while(index<16)	do
		if([PROCESS_TABLE+(index*16)+4]==TERMINATED)	then
			[PROCESS_TABLE+(index*16)+1]=index;
			[PROCESS_TABLE+(index*16)+4]=ALLOCATED;
			[PROCESS_TABLE+(index*16)+14]=PAGE_TABLE_BASE+(index*20);
			[PROCESS_TABLE+(index*16)+15]=10;
			R0=index;
			return;
		endif;
		index=index+1;
	endwhile;		
	R0=-1;
	return;
endif;
	
if(funct_num == 3)	then
	if([PROCESS_TABLE+(current_pid*16)+9]!=9)	then
		alias index R3;
		index=0;
		while(index<16)	do
			if(([PROCESS_TABLE+(index*16)+4]==WAIT_PROCESS)&&([PROCESS_TABLE+(index*16)+5]==current_pid))	then
				[PROCESS_TABLE+(index*16)+4]=READY;
				[PROCESS_TABLE+(index*16)+5]="";
		endif;
			if([PROCESS_TABLE+(index*16)+2]==current_pid)	then
				[PROCESS_TABLE+(index*16)+2]=-1;
			endif;
			index=index+1;
		endwhile;
	endif;
	multipush(R1,R2);
	R1 = 4;
	R2 = current_pid;
	call MOD_1;
	multipop(R1,R2);
	
	multipush(R1,R2);
	R1 = 2;
	R2 = current_pid;
	call MOD_1;
	multipop(R1,R2);
	
	[PROCESS_TABLE + (current_pid * 16) + 4] = TERMINATED;
endif;

if(funct_num == 2)	then
	alias uapn R3;
	uapn = [PROCESS_TABLE + (current_pid * 16) + 11];
	multipush(R1,R2,R3);
	R1 = 2;
	R2 = uapn;
	call MOD_2;
	multipop(R1,R2,R3);
endif;

if(funct_num == 4)	then
	alias page_table_base R3;
	page_table_base = PAGE_TABLE_BASE + (current_pid * 20);
	[page_table_base+0] = -1;
	[page_table_base+1] = "0000";
	[page_table_base+2] = -1;
	[page_table_base+3] = "0000";
	alias i1 R4;
	i1 = 4;
	while(i1 < 20)	do
		if([page_table_base + i1]!=-1)	then
			multipush(R1,R2,R3,R4);
			R1 = 2;
			R2 = [page_table_base + i1];
			call MOD_2;
			multipop(R1,R2,R3,R4);
			[page_table_base+i1] = -1;
			[page_table_base+i1+1] = "0000";
		endif;
		i1 = i1 + 2;
	endwhile;
	i1 = 0;
	while(i1 < 10)	do
		if(([DISK_MAP_TABLE + (current_pid * 10) + i1] != -1)&&((i1 < 4)&&(i1 > 7)))	then
			multipush(R1,R2,R3,R4);
			R1 = 4;
			R3 = current_pid;
			R2 = [DISK_MAP_TABLE + (current_pid * 16) + i1];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		endif;
		[DISK_MAP_TABLE + (current_pid * 10) + i1] = -1;
		i1 = i1 + 1;
	endwhile;
endif;
breakpoint;
return;
